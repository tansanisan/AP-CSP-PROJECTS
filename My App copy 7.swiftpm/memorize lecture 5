@ViewBuilder
func front(of card: Card) -> some View {
 RoundedRectangle(cornerRadius: 10)
 RoundedRectangle(cornerRadius: 10).stroke()
 Text(card.content)

 --> And it would be legal to put simple if-else’s to control which Views are included in the list.
(But this is just the front of our card, so we don’t need any ifs.)
The above would return a TupleView<RoundedRectangle,RoundedRectangle,Text>.

struct GeometryReader<Content> where Content: View {
 init(@ViewBuilder content: @escaping (GeometryProxy) -> Content) { . . . }
}


The content parameter is just a function that returns a View.
Now all users of GeometryReader get to use the list syntax to express the Views to be sized.
ZStack, HStack, VStack, ForEach, Group all do this same thing.
We could have done this in our Grid except that we don’t really know how to extract the Views.
That is something “private” that SwiftUI View combiners know how to do.
Probably will be made public down the road.

Viewbuilder : 
This function’s only job is to create a new View based on the thing passed to it.

protocol ViewModifier {
 associatedtype Content // this is a protocol’s version of a“don’t care”
 func body(content: Content) -> some View {
 return some View that represents a modification of content
 }
}


// Cardifier viewmodifier: 


Text(“!”).modifier(Cardify(isFaceUp: true)) // eventually .cardify(isFaceUp: true)
struct Cardify: ViewModifier {
 var isFaceUp: Bool
 func body(content: Content) -> some View {
 ZStack {
 if isFaceUp {
 RoundedRectangle(cornerRadius: 10).fill(Color.white)
 RoundedRectangle(cornerRadius: 10).stroke()
 content
 } else {
 RoundedRectangle(cornerRadius: 10)
 }
 }
 }
}


// Cardifier Viewmodifier ;

Text(“!”).modifier(Cardify(isFaceUp: true)) // eventually .cardify(isFaceUp: true)
struct Cardify: ViewModifier {
 var isFaceUp: Bool
 func body(content: Content) -> some View {
 ZStack {
 if isFaceUp {
 RoundedRectangle(cornerRadius: 10).fill(Color.white)
 RoundedRectangle(cornerRadius: 10).stroke()
 content
 } else {
 RoundedRectangle(cornerRadius: 10)
 }
 }
 }
}


// Cardifier Viewmodifier: 


Text(“!”).modifier(Cardify(isFaceUp: true)) // eventually .cardify(isFaceUp: true)
struct Cardify: ViewModifier {
 var isFaceUp: Bool
 func body(content: Content) -> some View {
 ZStack {
 if isFaceUp {
 RoundedRectangle(cornerRadius: 10).fill(Color.white)
 RoundedRectangle(cornerRadius: 10).stroke()
 content
 } else {
 RoundedRectangle(cornerRadius: 10)
 }
 }
 }
}


// Cardifier Viewmodifier: 

Text(“!”).modifier(Cardify(isFaceUp: true)) // eventually .cardify(isFaceUp: true)
struct Cardify: ViewModifier {
 var isFaceUp: Bool
 func body(content: Content) -> some View {
 ZStack {
 if isFaceUp {
 RoundedRectangle(cornerRadius: 10).fill(Color.white)
 RoundedRectangle(cornerRadius: 10).stroke()
 content
 } else {
 RoundedRectangle(cornerRadius: 10)
 }
 }
 }
}

// to modifier to cardify 
extension View {
 func cardify(isFaceUp: Bool) -> some View {
 return self.modifier(Cardify(isFaceUp: isFaceUp))
 }
}
